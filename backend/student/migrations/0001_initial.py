# Generated by Django 5.0.6 on 2025-01-07 11:03

import backend.student.models.student
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("schools", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=25,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            backend.student.models.student.alphabet_space_hyphen_validator,
                        ],
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=25,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            backend.student.models.student.alphabet_space_hyphen_validator,
                        ],
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        max_length=25,
                        validators=[
                            backend.student.models.student.alphabet_space_hyphen_validator
                        ],
                    ),
                ),
                (
                    "nin_number",
                    models.CharField(
                        blank=True,
                        help_text="Student's NIN Number (optional).",
                        max_length=12,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[1-9]\\d{0,10}$",
                                message="Only positive integers allowed.",
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField()),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")], max_length=1
                    ),
                ),
                (
                    "blood_group",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A+", "A+"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B-", "B-"),
                            ("AB+", "AB+"),
                            ("AB-", "AB-"),
                            ("O+", "O+"),
                            ("O-", "O-"),
                        ],
                        help_text="Student's blood group.",
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "genotype",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AA", "AA"),
                            ("AS", "AS"),
                            ("SS", "SS"),
                            ("SC", "SC"),
                        ],
                        help_text="Student's genotype.",
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "disability_status",
                    models.TextField(
                        blank=True,
                        help_text="Details about any disabilities the student has.",
                        null=True,
                    ),
                ),
                (
                    "country_of_birth",
                    models.CharField(
                        max_length=25,
                        validators=[
                            django.core.validators.MinLengthValidator(4),
                            backend.student.models.student.alphabet_space_hyphen_validator,
                        ],
                    ),
                ),
                (
                    "state_of_origin",
                    models.CharField(
                        max_length=25,
                        validators=[
                            django.core.validators.MinLengthValidator(4),
                            backend.student.models.student.alphabet_space_hyphen_validator,
                        ],
                    ),
                ),
                (
                    "place_of_birth",
                    models.CharField(
                        max_length=25,
                        validators=[
                            django.core.validators.MinLengthValidator(4),
                            backend.student.models.student.alphabet_space_hyphen_validator,
                        ],
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="Home address of the student.", null=True
                    ),
                ),
                (
                    "passport_photograph",
                    models.ImageField(
                        blank=True,
                        null=True,
                        unique=True,
                        upload_to="students/passport/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                            backend.student.models.student.validate_image,
                        ],
                    ),
                ),
                ("reg_num", models.CharField(max_length=11, unique=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the student is currently active.",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Record creation timestamp."
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Record last updated timestamp."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        help_text="The school this student is registered to.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="students",
                        to="schools.school",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student",
                "verbose_name_plural": "Students",
                "ordering": ["last_name", "first_name"],
                "unique_together": {
                    (
                        "first_name",
                        "last_name",
                        "date_of_birth",
                        "state_of_origin",
                        "place_of_birth",
                    )
                },
            },
        ),
        migrations.CreateModel(
            name="Guardian",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(help_text="Guardian's full name.", max_length=100),
                ),
                (
                    "relationship",
                    models.CharField(
                        choices=[
                            ("Father", "Father"),
                            ("Mother", "Mother"),
                            ("Guardian", "Guardian"),
                            ("Grandfather", "Grandfather"),
                            ("Grandmother", "Grandmother"),
                            ("Uncle", "Uncle"),
                            ("Aunt", "Aunt"),
                            ("Brother", "Brother"),
                            ("Sister", "Sister"),
                            ("Other", "Other"),
                        ],
                        default="Father",
                        help_text="Relationship to the student (e.g., Father, Mother, Uncle).",
                        max_length=50,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("1", "Primary Guardian"),
                            ("2", "Financial Sponsor"),
                            ("3", "Emergency Contact"),
                        ],
                        default="1",
                        max_length=1,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        help_text="Guardian's phone number.",
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Please use a valid Nigeria phone number",
                                regex="^(?:\\+234|0)?[789]\\d{9}$",
                            )
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Guardian's email address (optional).",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="Guardian's address.", null=True
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="The student this guardian is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guardians",
                        to="student.student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Attendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(help_text="Date of attendance.")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Present", "Present"),
                            ("Absent", "Absent"),
                            ("Excused", "Excused"),
                        ],
                        default="Present",
                        help_text="Attendance status for the student.",
                        max_length=20,
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="The student this attendance record is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to="student.student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AcademicInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "progression_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Promoted", "Promoted"),
                            ("Repeating", "Repeating"),
                            ("Graduated", "Graduated"),
                            ("Withdrawn", "Withdrawn"),
                            ("Transferred", "Transferred"),
                        ],
                        default="Promoted",
                        help_text="The current academic progression status of the student.",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "academic_session",
                    models.ForeignKey(
                        help_text="The academic session this enrollment is for.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="schools.academicsession",
                    ),
                ),
                (
                    "class_section",
                    models.ForeignKey(
                        help_text="The current class section of the student.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="academic_students",
                        to="schools.levelclasses",
                    ),
                ),
                (
                    "program_level",
                    models.ForeignKey(
                        help_text="The current academic level of the student.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="academic_students",
                        to="schools.programleveltemplate",
                    ),
                ),
                (
                    "stream",
                    models.ForeignKey(
                        blank=True,
                        help_text="The stream the student belongs to (e.g., Science).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="academic_students",
                        to="schools.stream",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="The student this academic info is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="academic_info",
                        to="student.student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EnrollmentRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("program", models.CharField(max_length=10)),
                (
                    "enrollment_mode",
                    models.CharField(
                        choices=[("1", "Fresh enrollment"), ("2", "Transfer")],
                        default="1",
                        help_text="Mode of enrollment for the student.",
                        max_length=1,
                    ),
                ),
                (
                    "generate_admission_info",
                    models.BooleanField(
                        default=True,
                        help_text="Generate admission information for this student.",
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateField(
                        auto_now_add=True, help_text="Date of enrollment."
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if this enrollment is currently active.",
                    ),
                ),
                (
                    "academic_session",
                    models.ForeignKey(
                        help_text="The academic session this enrollment is for.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="enrolled_students",
                        to="schools.academicsession",
                    ),
                ),
                (
                    "program_level",
                    models.ForeignKey(
                        help_text="The level/class section the student is enrolled in.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="enrolled_students",
                        to="schools.levelclasses",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="The school the student is enrolled in.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_enrollments",
                        to="schools.school",
                    ),
                ),
                (
                    "stream",
                    models.ForeignKey(
                        blank=True,
                        help_text="The stream the student is enrolled in (if applicable).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="enrolled_students",
                        to="schools.stream",
                    ),
                ),
                (
                    "student",
                    models.OneToOneField(
                        help_text="The student this enrollment record is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollment_record",
                        to="student.student",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "academic_session")},
            },
        ),
    ]
