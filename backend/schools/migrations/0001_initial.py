# Generated by Django 5.0.6 on 2025-01-07 11:03

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AcademicSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "school_type",
                    models.CharField(
                        choices=[
                            ("all", "All schools"),
                            ("public", "Public schools"),
                            ("private", "Private schools"),
                            ("community", "Community schools"),
                            ("individual", "Individual schools"),
                        ],
                        default="all",
                        max_length=10,
                    ),
                ),
                (
                    "program",
                    models.CharField(
                        choices=[
                            ("primary", "Primary Schools"),
                            ("jss", "Junior Secondary Schools"),
                            ("sss", "Senior Secondary Schools"),
                            ("primary+jss", "Primary + Junior Secondary Schools"),
                            (
                                "jss+sss",
                                "Junior Secondary Schools + Senior Secondary Schools",
                            ),
                            ("all", "All Programs"),
                        ],
                        default="all",
                        max_length=12,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("upcoming", "Upcoming"),
                        ],
                        default="upcoming",
                        help_text="Current status of the academic session.",
                        max_length=10,
                    ),
                ),
                ("session_name", models.CharField(max_length=100)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "ordering": ["start_date"],
            },
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255, unique=True)),
                (
                    "abbreviation",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "motto",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("established_date", models.DateField(blank=True, null=True)),
                (
                    "school_type",
                    models.CharField(
                        choices=[
                            ("public", "Public School"),
                            ("private", "Private School"),
                            ("community", "Community School"),
                        ],
                        db_index=True,
                        default="public",
                        max_length=20,
                    ),
                ),
                ("is_vocational", models.BooleanField(default=False)),
                (
                    "program",
                    models.CharField(
                        choices=[
                            ("primary", "Primary"),
                            ("jss", "Junior Secondary School"),
                            ("sss", "Senior Secondary School"),
                            ("primary+jss", "Primary + Junior Secondary School"),
                            (
                                "jss+sss",
                                "Junior Secondary School + Senior Secondary School",
                            ),
                            ("all", "All Programs"),
                        ],
                        db_index=True,
                        default="all",
                        max_length=12,
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="schools_logo/%Y/%m/%d/"
                    ),
                ),
                (
                    "registration_number",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, null=True, unique=True
                    ),
                ),
                ("lga", models.CharField(default="", max_length=50)),
                ("city", models.CharField(blank=True, max_length=50, null=True)),
                ("ward", models.CharField(default="", max_length=50)),
                ("street_address", models.TextField(default="")),
                ("phone", models.CharField(max_length=15)),
                ("email", models.EmailField(blank=True, max_length=255, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DepartmentRepository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        help_text="Name of the department", max_length=100
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("certification_awarded", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="GradingScale",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scale_name",
                    models.CharField(
                        help_text="Name of the grading scale (e.g., Standard Scale).",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the grading scale."
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Classrooms",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("number_of_classrooms", models.PositiveSmallIntegerField(default=0)),
                ("classrooms_availability", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComputerLab",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("number_of_computers", models.PositiveIntegerField(default=0)),
                ("internet_access", models.BooleanField(default=False)),
                ("smart_classrooms", models.BooleanField(default=False)),
                ("computer_lab_availability", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Laboratory",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lab_type",
                    models.CharField(
                        choices=[
                            ("Physics", "Physics"),
                            ("Chemistry", "Chemistry"),
                            ("Biology", "Biology"),
                            ("Robotics", "Robotics"),
                        ],
                        max_length=100,
                    ),
                ),
                ("lab_equipment", models.TextField(blank=True)),
                ("lab_availability", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Library",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("book_count", models.PositiveIntegerField(default=0)),
                ("digital_access", models.BooleanField(default=False)),
                (
                    "study_space_capacity",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("library_availability", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpecialNeedsResource",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "resource_name",
                    models.CharField(
                        help_text="Name of the needed resource (e.g., Computers, Desks).",
                        max_length=100,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("furniture", "Furniture"),
                            ("equipment", "Equipment"),
                            ("facility", "Facility"),
                            ("educational_material", "Educational Material"),
                            ("technology", "Technology"),
                            ("other", "Other"),
                        ],
                        help_text="Category of the resource.",
                        max_length=50,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        help_text="Required quantity (e.g., 20 desks)."
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about the resource needed.",
                    ),
                ),
                (
                    "urgency_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        help_text="Urgency level of the resource requirement.",
                        max_length=50,
                    ),
                ),
                ("date_requested", models.DateField(auto_now_add=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SportsFacility",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "facility_type",
                    models.CharField(
                        choices=[
                            ("Football Field", "Football Field"),
                            ("Basketball Court", "Basketball Court"),
                            ("Volleyball Court", "Volleyball Court"),
                            ("Swimming Pool", "Swimming Pool"),
                        ],
                        max_length=100,
                    ),
                ),
                ("field_availability", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VocationalFacility",
            fields=[
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="schools.school",
                    ),
                ),
                (
                    "images_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the image.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("facility_name", models.CharField(max_length=100)),
                (
                    "facility_type",
                    models.CharField(
                        choices=[
                            ("Workshop", "Workshop"),
                            ("Laboratory", "Laboratory"),
                            ("Training Center", "Training Center"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "equipment_available",
                    models.TextField(
                        blank=True, help_text="List of equipment available."
                    ),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Capacity in terms of students or resources.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CalendarEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_name",
                    models.CharField(
                        help_text="Name of the event (e.g., Mid-Term Exam, PTA Meeting).",
                        max_length=100,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("Academic", "Academic"),
                            ("Administrative", "Administrative"),
                            ("Extra-Curricular", "Extra-Curricular"),
                            ("Emergency", "Emergency"),
                            ("Exam", "Exam"),
                            ("Other", "Other"),
                        ],
                        help_text="Type of the event.",
                        max_length=20,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="Start date and time of the event."),
                ),
                (
                    "end_date",
                    models.DateTimeField(help_text="End date and time of the event."),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True, help_text="Indicates if attendance is mandatory."
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional details about the event."
                    ),
                ),
                (
                    "recurrence_type",
                    models.CharField(
                        choices=[
                            ("None", "None"),
                            ("Weekly", "Weekly"),
                            ("Monthly", "Monthly"),
                            ("Yearly", "Yearly"),
                        ],
                        default="None",
                        help_text="Indicates if the event recurs periodically.",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "academic_session",
                    models.ForeignKey(
                        blank=True,
                        help_text="Academic session this event belongs to (optional).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="schools.academicsession",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="The school this event belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calendar_events",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Budget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "fiscal_year",
                    models.CharField(
                        help_text="Fiscal year (e.g., 2024).", max_length=10
                    ),
                ),
                (
                    "total_budget",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total annual budget.",
                        max_digits=15,
                    ),
                ),
                (
                    "salaries",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Budget allocated for salaries.",
                        max_digits=15,
                    ),
                ),
                (
                    "infrastructure",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Budget for infrastructure development.",
                        max_digits=15,
                    ),
                ),
                (
                    "learning_materials",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Budget for learning materials.",
                        max_digits=15,
                    ),
                ),
                (
                    "miscellaneous",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Miscellaneous expenditures.",
                        max_digits=15,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional budget details."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AttendanceSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attendance_mode",
                    models.CharField(
                        choices=[("1", "Term End"), ("2", "Daily")],
                        default="1",
                        max_length=1,
                    ),
                ),
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_settings",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AccreditationStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "accreditation_number",
                    models.CharField(blank=True, max_length=15, null=True, unique=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("awaiting accreditation.", "Awaiting Accreditation."),
                            ("accreditated", "Accreditated"),
                            ("not-accreditated", "Not Accreditated"),
                            ("cancelled", "Accreditation cancelled"),
                        ],
                        default=("awaiting accreditation.", "Awaiting Accreditation."),
                        max_length=23,
                    ),
                ),
                ("valid_from", models.DateField(blank=True, null=True)),
                ("valid_to", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="academicsession",
            name="school",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="academic_sessions",
                to="schools.school",
            ),
        ),
        migrations.CreateModel(
            name="ExpenseCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the expense category (e.g., Salaries, Utilities).",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the expense category."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FeeStructure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "fee_type",
                    models.CharField(
                        choices=[
                            ("tuition", "Tuition Fee"),
                            ("registration", "Registration Fee"),
                            ("exam", "Examination Fee"),
                            ("data_management", "Data Management Fee"),
                            ("sports", "Sports Fee"),
                            ("laboratory", "Laboratory Fee"),
                            ("extra_lesson", "Extra Lesson Fee"),
                            ("execution", "Execution Fee"),
                            ("field_trip", "Field Trip Fee"),
                            ("graduation", "Graduation Fee"),
                            ("other", "Other Fee"),
                        ],
                        help_text="Type of fee being charged.",
                        max_length=50,
                    ),
                ),
                (
                    "is_optional",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this fee is optional (e.g., Extra Lesson classes).",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, help_text="Amount in Naira.", max_digits=10
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional details about the fee."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FundingSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "source_name",
                    models.CharField(
                        help_text="Name of the funding source (e.g., Government Grant).",
                        max_length=100,
                    ),
                ),
                (
                    "funding_type",
                    models.CharField(
                        choices=[
                            ("government", "Government"),
                            ("donation", "Donation"),
                            ("loan", "Loan"),
                            ("other", "Other"),
                        ],
                        help_text="Type of funding source.",
                        max_length=50,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount received in local currency.",
                        max_digits=15,
                    ),
                ),
                ("date_received", models.DateField()),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional details about the funding."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InspectionReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("findings", models.TextField()),
                ("recommendations", models.TextField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "invoice_id",
                    models.CharField(
                        editable=False,
                        help_text="Unique invoice identifier (e.g., INV-YYYYMMDD-XXXXX).",
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "invoice_date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="The date when the invoice was created.",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(help_text="The date by which the payment is due."),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total amount to be paid.",
                        max_digits=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Partial", "Partialy Paid"),
                            ("Paid", "Paid"),
                            ("Overdue", "Overdue"),
                        ],
                        default="Pending",
                        help_text="Current status of the invoice.",
                        max_length=20,
                    ),
                ),
                (
                    "optional_fees_selected",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Optional fees selected by the parent or guardian.",
                        to="schools.feestructure",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ParentEngagement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_name",
                    models.CharField(
                        help_text="Name of the activity (e.g., PTA Meeting).",
                        max_length=100,
                    ),
                ),
                ("activity_date", models.DateField(help_text="Date of the activity.")),
                (
                    "participants_count",
                    models.PositiveIntegerField(
                        help_text="Number of parents who participated."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_engagements",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount paid in Naira.",
                        max_digits=10,
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="The date when the payment was made.",
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("Cash", "Cash"),
                            ("Check", "Check"),
                            ("Online", "Online"),
                            ("Bank Transfer", "Bank Transfer"),
                            ("POS", "POS"),
                        ],
                        help_text="Method used for the payment.",
                        max_length=20,
                    ),
                ),
                (
                    "receipt_number",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Unique receipt number for the payment. if its cash, leave it the system will generate",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(
                        help_text="The invoice this payment is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="schools.invoice",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProgramLevelTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "program",
                    models.CharField(
                        choices=[
                            ("primary", "Primary"),
                            ("jss", "Junior Secondary School"),
                            ("sss", "Senior Secondary School"),
                        ],
                        max_length=7,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        help_text="Level name (e.g., Primary 1, JSS 2).", max_length=9
                    ),
                ),
            ],
            options={
                "unique_together": {("program", "level")},
            },
        ),
        migrations.AddField(
            model_name="feestructure",
            name="class_level",
            field=models.ForeignKey(
                help_text="The class level this fee applies to.",
                on_delete=django.db.models.deletion.CASCADE,
                to="schools.programleveltemplate",
            ),
        ),
        migrations.CreateModel(
            name="ScholarshipAndAid",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the scholarship or aid program.",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Details about the program."
                    ),
                ),
                (
                    "eligibility_criteria",
                    models.TextField(help_text="Criteria for students to qualify."),
                ),
                (
                    "total_funding",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount allocated.",
                        max_digits=15,
                    ),
                ),
                (
                    "application_deadline",
                    models.DateField(
                        blank=True,
                        help_text="Deadline for applications (if any).",
                        null=True,
                    ),
                ),
                (
                    "number_of_recipients",
                    models.PositiveIntegerField(
                        help_text="Number of students benefiting from this program."
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SchoolDepartment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "departments",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schools.departmentrepository",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="school_departments",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SchoolExpense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(help_text="Details of the expense.")),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, help_text="Amount spent.", max_digits=15
                    ),
                ),
                (
                    "date_incurred",
                    models.DateField(help_text="Date when the expense was incurred."),
                ),
                (
                    "receipt_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique receipt or reference number for this expense.",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Category of the expense.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="school_expenses",
                        to="schools.expensecategory",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SchoolFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("Staff", "Staff"),
                            ("Student", "Student"),
                            ("Parent", "Parent"),
                            ("Public Individual", "Public Individual"),
                            ("Organization", "Organization"),
                            ("Anonymous", "Anonymous"),
                        ],
                        help_text="Role of the person providing feedback.",
                        max_length=50,
                    ),
                ),
                (
                    "feedback_by",
                    models.CharField(
                        blank=True,
                        help_text="Name of the person providing feedback (optional for anonymous).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Subject or title of the feedback.", max_length=100
                    ),
                ),
                (
                    "feedback_text",
                    models.TextField(help_text="Detailed feedback or complaint."),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the feedback was submitted.",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="The school this feedback is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to="schools.school",
                    ),
                ),
            ],
            options={
                "verbose_name": "School Feedback",
                "verbose_name_plural": "School Feedbacks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SchoolImages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("image_type", models.CharField(max_length=50)),
                (
                    "image",
                    models.ImageField(upload_to="infrastructure_images/%Y/%m/%d/"),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SchoolMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_of_instruction",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("hs", "Hausa"),
                            ("ff", "Fulfulde"),
                            ("yb", "Yoruba"),
                            ("ig", "Igbo"),
                        ],
                        default="en",
                        help_text="Primary language(s) used in teaching",
                        max_length=2,
                    ),
                ),
                (
                    "enrollment_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Annual enrollment capacity of the school.",
                    ),
                ),
                (
                    "ownership_status",
                    models.CharField(
                        choices=[
                            ("state government", "State Government"),
                            ("local government", "Local Government"),
                            ("private individual", "Private Individual"),
                            ("religious body", "Religious Body"),
                            ("community", "Community"),
                        ],
                        default="state government",
                        help_text="Ownership status of the school",
                        max_length=30,
                    ),
                ),
                (
                    "owner",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Name of the owner, e.g., JIBWIS JOS, Akko Local Government",
                        max_length=110,
                    ),
                ),
                (
                    "compliance_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Record of the school's compliance with standards as a percentage (e.g., 80%).",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Staff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        help_text="Full name of the staff member.", max_length=100
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("Teacher", "Teacher"),
                            ("Assistant Teacher", "Assistant Teacher"),
                            ("Head Teacher", "Head Teacher"),
                            ("Form Master", "Form Master"),
                            ("Accountant", "Accountant"),
                            ("Clerk", "Clerk"),
                            ("Cleaner", "Cleaner"),
                            ("Security Guard", "Security Guard"),
                            ("Librarian", "Librarian"),
                            ("Counselor", "Counselor"),
                            ("ICT Officer", "ICT Officer"),
                            ("Lab Technician", "Lab Technician"),
                            ("Nurse", "School Nurse"),
                            ("Cafeteria Manager", "Cafeteria Manager"),
                            ("Driver", "Driver"),
                            ("Principal", "Principal"),
                            ("Vice Principal", "Vice Principal"),
                            ("Games Master", "Games Master"),
                            ("Administrative Officer", "Administrative Officer"),
                            ("Store Keeper", "Store Keeper"),
                            ("Nanny", "Nanny"),
                            ("Other", "Other"),
                        ],
                        help_text="Job position of the staff member.",
                        max_length=50,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address of the staff member.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Contact phone number.",
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the staff member is currently active.",
                    ),
                ),
                (
                    "date_joined",
                    models.DateField(
                        help_text="Date the staff member joined the school."
                    ),
                ),
                (
                    "salary_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Monthly salary of the staff member.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="staff_profiles/%Y/%m/%d/"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="The school this staff member belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staffs",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Salary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("pay_date", models.DateField(blank=True, null=True)),
                (
                    "staff",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.staff"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Stakeholder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the stakeholder.", max_length=100
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("Principal", "Principal"),
                            ("Liaison Officer", "Liaison Officer"),
                            ("Director", "Director"),
                            ("Board Member", "Board Member"),
                            ("Head Master", "Head Master"),
                        ],
                        help_text="Position or role of the stakeholder.",
                        max_length=100,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address of the stakeholder.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Contact phone number.",
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "tenure_start",
                    models.DateField(
                        help_text="Date when the stakeholder's tenure started."
                    ),
                ),
                (
                    "tenure_end",
                    models.DateField(
                        blank=True,
                        help_text="Date when the stakeholder's tenure ends (if applicable).",
                        null=True,
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        help_text="Profile picture of the stakeholder.",
                        null=True,
                        upload_to="stakeholders_profiles/%Y/%m/%d/",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="The school this stakeholder is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stakeholders",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Stream",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("science", "Science"),
                            ("arts", "Arts"),
                            ("commercial", "Commercial"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "program_level_template",
                    models.ForeignKey(
                        help_text="The level this stream belongs to (e.g., SSS 1, JSS 2).",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="streams",
                        to="schools.programleveltemplate",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LevelClasses",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "class_section_name",
                    models.CharField(
                        help_text="Name of the section (e.g., A, B, Usman Ibn Affan).",
                        max_length=50,
                    ),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        help_text="Number of students this class can accommodate.",
                        null=True,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classes",
                        to="schools.school",
                    ),
                ),
                (
                    "program_level_template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="level_classes",
                        to="schools.programleveltemplate",
                    ),
                ),
                (
                    "stream",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sections",
                        to="schools.stream",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubjectRepository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject_name", models.CharField(max_length=100)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("core", "Core"),
                            ("religious", "Religious"),
                            ("vocational", "Vocational"),
                            ("local_language", "Local Language"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "program_levels",
                    models.ManyToManyField(
                        related_name="repository_subjects",
                        to="schools.programleveltemplate",
                    ),
                ),
                (
                    "streams",
                    models.ManyToManyField(
                        blank=True,
                        related_name="repository_subjects",
                        to="schools.stream",
                    ),
                ),
                (
                    "vocational_department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Applicable only for vocational subjects.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subjects",
                        to="schools.departmentrepository",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubjectGradingConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weightage",
                    models.DecimalField(
                        decimal_places=2,
                        default=100.0,
                        help_text="Weightage of the subject in the total grade calculation.",
                        max_digits=5,
                    ),
                ),
                (
                    "grading_scale",
                    models.ForeignKey(
                        help_text="The grading scale to be used for this subject.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subject_configs",
                        to="schools.gradingscale",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="The subject this grading configuration applies to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grading_configurations",
                        to="schools.subjectrepository",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SchoolSubject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if this subject is currently active/offered by the school.",
                    ),
                ),
                (
                    "is_compulsory",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if this subject is compulsory for students at the school.",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="The school offering this subject.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="offered_subjects",
                        to="schools.school",
                    ),
                ),
                (
                    "subject_repository",
                    models.ForeignKey(
                        help_text="The subject from the central repository.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="school_subjects",
                        to="schools.subjectrepository",
                    ),
                ),
            ],
            options={
                "verbose_name": "School Subject",
                "verbose_name_plural": "School Subjects",
            },
        ),
        migrations.CreateModel(
            name="SuspensionClosure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_statewide", models.BooleanField(default=False)),
                (
                    "suspension_type",
                    models.CharField(
                        choices=[("Suspension", "Suspension"), ("Closure", "Closure")],
                        max_length=100,
                    ),
                ),
                ("reason", models.TextField()),
                ("suspended_from", models.DateField()),
                ("suspended_to", models.DateField(blank=True, null=True)),
                ("is_indefinite", models.BooleanField(default=False)),
                ("is_dropped", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="schools.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Term",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "term_name",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "First Term"),
                            (2, "Second Term"),
                            (3, "Third Term"),
                        ],
                        help_text="Name of the term.",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(help_text="Start date of the term.", null=True),
                ),
                (
                    "end_date",
                    models.DateField(help_text="End date of the term.", null=True),
                ),
                (
                    "academic_session",
                    models.ForeignKey(
                        help_text="The academic session this term belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="terms",
                        to="schools.academicsession",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VocationalPartnership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("partner_name", models.CharField(max_length=100)),
                (
                    "partnership_type",
                    models.CharField(
                        choices=[
                            ("Industry", "Industry"),
                            ("Government", "Government"),
                            ("NGO", "NGO"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Details of the partnership."
                    ),
                ),
                ("partner_address", models.TextField(blank=True, null=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vocational_partnerships",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="academicsession",
            unique_together={("school", "session_name", "program", "school_type")},
        ),
        migrations.CreateModel(
            name="GradeBoundary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        help_text="Grade label (e.g., A, B, C).", max_length=2
                    ),
                ),
                (
                    "lower_bound",
                    models.PositiveSmallIntegerField(
                        help_text="Minimum score for this grade."
                    ),
                ),
                (
                    "upper_bound",
                    models.PositiveSmallIntegerField(
                        help_text="Maximum score for this grade."
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about this grade boundary.",
                    ),
                ),
                (
                    "grading_scale",
                    models.ForeignKey(
                        help_text="The grading scale this boundary belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grade_boundaries",
                        to="schools.gradingscale",
                    ),
                ),
            ],
            options={
                "ordering": ["grade"],
                "unique_together": {("grading_scale", "grade")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="feestructure",
            unique_together={("class_level", "fee_type")},
        ),
        migrations.AddIndex(
            model_name="stream",
            index=models.Index(fields=["name"], name="schools_str_name_23a437_idx"),
        ),
        migrations.AddIndex(
            model_name="stream",
            index=models.Index(fields=["id"], name="schools_str_id_a74626_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="levelclasses",
            unique_together={
                ("program_level_template", "class_section_name", "school")
            },
        ),
        migrations.AlterUniqueTogether(
            name="schoolsubject",
            unique_together={("school", "subject_repository")},
        ),
    ]
